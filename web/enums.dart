part of RWDK;

abstract class RichEnum {
	static Map<RichEnum, Function> _conditions = new Map<RichEnum, Function>();
	//static Map<String, RichEnum> _namemap = new Map<String, RichEnum>();
	
	static List<RichEnum> values = [];
	
	RichEnum(String this.name, String this.blurb, [String this.iconstyle = null, String this.iconblurb = ""]) {
		this.displayName = this.name;
	}
	
	final String name;
	String displayName;
	final String blurb;
	final String iconstyle;
	final String iconblurb;
	
	void addCondition(condition(List<RichEnum> others)) {
		_conditions[this] = condition;
	}
	
	bool allowed(List<RichEnum> others) {
		if (_conditions[this] != null) {
			return _conditions[this](others);
		}
		return true;
	}
	
	String toString() {
		return "${this.runtimeType}: ${this.name}${(this.displayName != this.name) ? " (${this.displayName})" : ""}";
	}

	static void initEnums() {
		/*for (RichEnum r in EnumExplosion.values) {
			_namemap[r.saveName] = r;
		}*/
		EnumExplosion.values.sort((RichEnum e1, RichEnum e2){ return e1.name.compareTo(e2.name);});
		/*for (RichEnum r in EnumCommand.values) {
			_namemap[r.saveName] = r;
		}*/
		EnumCommand.values.sort((RichEnum e1, RichEnum e2){ return e1.name.compareTo(e2.name);});
		/*for (RichEnum r in EnumFeature.values) {
			_namemap[r.saveName] = r;
		}*/
		EnumFeature.values.sort((RichEnum e1, RichEnum e2){ return e1.name.compareTo(e2.name);});
		/*for (RichEnum r in EnumPlayable.values) {
			_namemap[r.saveName] = r;
		}*/
	}
}


class EnumExplosion extends RichEnum {
	EnumExplosion(String name, String blurb, [String iconstyle = null, String iconblurb = ""]):super(name, blurb, iconstyle, iconblurb);
	
	static final EnumExplosion ENABLED = new EnumExplosion("ENABLED","Explode on contact");
	static final EnumExplosion PROXIMITY = new EnumExplosion("PROXIMITY","Explode when targets are near");
	static final EnumExplosion FINAL = new EnumExplosion("FINAL","Explode on contact and expiration");
	
	static List<RichEnum> values = [ENABLED, PROXIMITY, FINAL];
}

class EnumPlayable extends RichEnum {
	EnumPlayable(String name, String blurb, [String iconstyle = null, String iconblurb = ""]):super(name, blurb, iconstyle, iconblurb);
	
	static final EnumPlayable UNPLAYABLE = new EnumPlayable("0","Cannot be unlocked for play. NPC only.")..displayName="Not playable";
	static final EnumPlayable UNLOCKABLE = new EnumPlayable("1","Unlockable when killing a ship of the faction worth more than 1000P.")..displayName="Unlockable";
	static final EnumPlayable UNLOCKED = new EnumPlayable("2","Available to players immediately without having to unlock.")..displayName="Always unlocked";
	
	static List<RichEnum> values = [UNPLAYABLE, UNLOCKABLE, UNLOCKED];
}

class EnumPlant extends RichEnum {
	EnumPlant(String name, String blurb, [String iconstyle = null, String iconblurb = ""]):super(name, blurb, iconstyle, iconblurb);
	
	static final EnumPlant GREEN = new EnumPlant("0","Green plants, randomly generated by the game")..displayName="Green plants";
	static final EnumPlant BLUE = new EnumPlant("1","Blue plants, randomly generated by the game")..displayName="Blue plants";
	static final EnumPlant PINK = new EnumPlant("2","Pink plants, randomly generated by the game")..displayName="Pink plants";
	static final EnumPlant FACTION = new EnumPlant("-1","Designs sourced from the controlling faction which contain a root or seed block (e.g. bee city buildings, borg block structures, the spikey plants)")..displayName="Faction structures";
	
	static List<RichEnum> values = [GREEN,BLUE,PINK,FACTION];
}

class EnumRegionType extends RichEnum {
	EnumRegionType(String name, String blurb, [String iconstyle = null, String iconblurb = ""]):super(name, blurb, iconstyle, iconblurb);
	
	static final EnumRegionType VORONOI = new EnumRegionType("0","Regions where each point is assigned to the cell with the closest centre point")..displayName="Voronoi regions";
	static final EnumRegionType SPLATS = new EnumRegionType("1","Irregular blob regions")..displayName="Splats";
	static final EnumRegionType CIRCLES = new EnumRegionType("2","Circular regions")..displayName="Circles";
	
	static List<RichEnum> values = [VORONOI, SPLATS, CIRCLES];
}

class EnumBinding extends RichEnum {
	EnumBinding(String name, String blurb, [String iconstyle = null, String iconblurb = ""]):super(name, blurb, iconstyle, iconblurb);
	
	static final EnumBinding LEFT = new EnumBinding("1", "Left mouse button. Default for cannons/lasers.")..displayName="Left click";
	static final EnumBinding RIGHT = new EnumBinding("2", "Right mouse button. Default for launchers.")..displayName="Right click";
	static final EnumBinding MIDDLE = new EnumBinding("3", "Middle mouse button. Not a default binding for anything. Defaults to ripple fire mode.")..displayName="Middle click";
	static final EnumBinding AUTO = new EnumBinding("4", "Automatic targeting. Targets enemies you are aiming at or have locked. Not a default binding for anything.")..displayName="Autofire";
	static final EnumBinding PD = new EnumBinding("5", "Point defence. Targets incoming destroyable projectiles first, then other enemies. Default for any weapon with the AUTOFIRE feature.")..displayName="Point defence";
	
	static List<RichEnum> values = [LEFT, MIDDLE, RIGHT, AUTO, PD];
}

class EnumCommand extends RichEnum {
	EnumCommand(String name, String blurb, [String iconstyle = null, String iconblurb = ""]):super(name, blurb, iconstyle, iconblurb);
	
	static final EnumCommand METAMORPHOSIS = new EnumCommand("METAMORPHOSIS","Ships with this tag will occasionally change design at their discretion.", "random", "NPC ships may change design");
	static final EnumCommand FLOCKING = new EnumCommand("FLOCKING","Ships with this tag will tend to travel in groups, aligning their direction of travel.", "th", "Flocking behaviour");
	static final EnumCommand RECKLESS = new EnumCommand("RECKLESS","Ships with this tag will flee less from combat.", "exclamation-sign", "Reckless AI");
	static final EnumCommand AGGRESSIVE = new EnumCommand("AGGRESSIVE","Ships with this tag are more eager to attack enemy targets.", "fire", "Aggressive AI");
	static final EnumCommand CAUTIOUS = new EnumCommand("CAUTIOUS","Ships with this tag are less eager to attack enemy targets.", "question-sign", "Cautious AI");
	static final EnumCommand SOCIAL = new EnumCommand("SOCIAL","Ships with this tag will call for help when under attack.", "volume-up", "Calls for help");
	static final EnumCommand PEACEFUL = new EnumCommand("PEACEFUL","Ships with this tag will not attack without provocation.", "grain", "Peaceful AI");
	static final EnumCommand WANDER = new EnumCommand("WANDER","Ships with this tag will wander randomly in their spare time.", "transfer", "Wanders");
	static final EnumCommand HATES_PLANTS = new EnumCommand("HATES_PLANTS","Ships with this tag will attempt to kill plants if in range.", "tree-conifer", "Hates plants");
	static final EnumCommand FORGIVING = new EnumCommand("FORGIVING","Ships with this tag will stop attacking more readily.", "ok-circle", "Forgiving AI");
	static final EnumCommand TRACTOR_TRANSIENT = new EnumCommand("TRACTOR_TRANSIENT","Ships with this tag will collect spare blocks from wreckage to use.", "repeat", "NPC ships will reuse wrecked parts");
	static final EnumCommand DODGES = new EnumCommand("DODGES","Ships with this tag will attempt to avoid projectiles if possible.", "resize-horizontal", "Will attempt to dodge projectiles");
	static final EnumCommand RIPPLE_FIRE = new EnumCommand("RIPPLE_FIRE","Ships with this tag will use ripple fire when firing their weapons.", "equalizer", "Uses ripple fire");
	static final EnumCommand SPREAD_FIRE = new EnumCommand("SPREAD_FIRE","Ships with this tag will spread their fire around when attacking.", "fullscreen", "Uses spread fire");
	static final EnumCommand BAD_AIM = new EnumCommand("BAD_AIM","Ships with this tag are poor shots and will miss more often.", "remove", "Poor aim");
	static final EnumCommand POINT_DEFENSE = new EnumCommand("POINT_DEFENSE","Ships with this tag will act as point defence drones.", "record", "Will act as point defence drones");
	static final EnumCommand INACTIVE = new EnumCommand("INACTIVE","Ships with this tag will take no action at all. Not recommended.", "ban-circle warning");
	static final EnumCommand SMART_FIRE = new EnumCommand("SMART_FIRE","Ships with this tag will spread their fire if the enemy is expected to dodge.", "screenshot", "Will attempt to spread fire if enemy dodges");
	static final EnumCommand NO_PARENT = new EnumCommand("NO_PARENT","Ships with this tag will not follow their parent. Particularly good for seed launchers.", "home", "Will not follow parent ships");
	static final EnumCommand ATTACK = new EnumCommand("ATTACK","Ships with this tag will blindly attack targets as if they were in tournament mode. Prevents most normal behaviour. Not recommended.", "alert warningminor", "Will attack enemies at any opportunity");
	static final EnumCommand MUTATE = new EnumCommand("MUTATE","Ships with this tag will deviate from their blueprint, randomly changing some blocks each generation. Experimental - use at your own risk.", "refresh warningminor", "Mutates between generations");
	
	static List<RichEnum> values =  [METAMORPHOSIS, FLOCKING, RECKLESS, AGGRESSIVE, CAUTIOUS, SOCIAL, PEACEFUL, WANDER, HATES_PLANTS, FORGIVING, TRACTOR_TRANSIENT, DODGES, RIPPLE_FIRE, SPREAD_FIRE, BAD_AIM, POINT_DEFENSE, INACTIVE, SMART_FIRE, NO_PARENT, ATTACK, MUTATE];
}

class EnumFeature extends RichEnum {
	EnumFeature(String name, String blurb, [String iconstyle = null, String iconblurb = ""]):super(name, blurb, iconstyle, iconblurb);
	
	static final EnumFeature COMMAND = new EnumFeature("COMMAND","This block is a command module. Enables the command settings section.", "star", "Command");
	static final EnumFeature THRUSTER = new EnumFeature("THRUSTER","This block is a thruster.", "arrow-right", "Thruster");
	static final EnumFeature GENERATOR = new EnumFeature("GENERATOR","This blocks generates or stores power.", "flash", "Generator");
	static final EnumFeature TURRET = new EnumFeature("TURRET","Turreted weapon. Must be used with CANNON or LASER.", "play-circle", "Turreted");
	static final EnumFeature CANNON = new EnumFeature("CANNON","Projectile weapon. Enables the cannon settings section.", "screenshot", "Cannon");
	static final EnumFeature LASER = new EnumFeature("LASER","Beam weapon. Enables the laser settings section.", "screenshot", "Laser");
	static final EnumFeature SHIELD = new EnumFeature("SHIELD","Projects a round shield for blocking enemy fire. Enables the shield settings section.", "record", "Shield Generator");
	static final EnumFeature TORQUER = new EnumFeature("TORQUER","Provides torque to let ships rotate without levering thrust.", "repeat", "Torquer");
	static final EnumFeature LAUNCHER = new EnumFeature("LAUNCHER","Generates launchable blocks - missiles, seeds, mines, drones. Enables the replicateBlock section.", "log-out", "Launcher");
	static final EnumFeature EXPLODE = new EnumFeature("EXPLODE","Explodes on contact with enemies.");
	static final EnumFeature ASSEMBLER = new EnumFeature("ASSEMBLER","Allows the ship to regenerate and collect missing blocks from wreckage.");
	static final EnumFeature REGROWER = new EnumFeature("REGROWER","Allows the ship to regenerate missing parts but NOT collect them from wreckage.");
	static final EnumFeature CANNON_BOOST = new EnumFeature("CANNON_BOOST","Modifies attached cannon blocks. Enables the cannon_boost settings section.", "plus-sign", "Cannon Booster");
	static final EnumFeature INVULNERABLE = new EnumFeature("INVULNERABLE","Makes the block totally indestructible. NOT RECOMMENDED.", "exclamation-sign warning", "Invulnerable");
	static final EnumFeature NOREGEN = new EnumFeature("NOREGEN","Prevents the block from regenerating health or being replaced.");
	static final EnumFeature ENVIRONMENTAL = new EnumFeature("ENVIRONMENTAL","Allows plants and other ROOT blocks to attach and grow.", "tree-conifer", "Environmental");
	static final EnumFeature TRACTOR = new EnumFeature("TRACTOR","Collects R packets.", "magnet", "Resource Collector");
	static final EnumFeature ROOT = new EnumFeature("ROOT","Can attach to asteroids and blocks marked ENVIRONMENTAL.");
	static final EnumFeature PHOTOSYNTH = new EnumFeature("PHOTOSYNTH","Generates resources over time.", "leaf", "Resource Generator");
	static final EnumFeature AUTOLAUNCH = new EnumFeature("AUTOLAUNCH","Weapon fires by itself without reason.");
	static final EnumFeature FREERES = new EnumFeature("FREERES","Does not drop resources when destroyed. Good for missiles and drones.");
	static final EnumFeature FACTORY = new EnumFeature("FACTORY","Allows construction of other ships.", "cog", "Factory");
	static final EnumFeature SEED = new EnumFeature("SEED","Can plant on ENVIRONMENTAL blocks and asteroids. Will thrust if also a THRUSTER. Enables the command settings section.");
	static final EnumFeature CHARGING = new EnumFeature("CHARGING","Weapon must be charged before firing. Requires CANNON or LASER.");
	static final EnumFeature MELEE = new EnumFeature("MELEE","Does additional damage on contact with enemy blocks.", "tint", "Additional Melee Damage");
	static final EnumFeature SELFFACTORY = new EnumFeature("SELFFACTORY","Allows construction of ships, but only of the same blueprint.", "cog", "Self-Factory");
	static final EnumFeature NOCLIP = new EnumFeature("NOCLIP","Does not collide with objects.", "random", "Does not collide");
	static final EnumFeature INVISIBLE = new EnumFeature("INVISIBLE","Does not render the block shape. Still renders turrets and shields.", "eye-close warningminor", "Invisible");
	static final EnumFeature TELEPORTER = new EnumFeature("TELEPORTER","Allows the ship to teleport at a cost of energy per unit mass.", "transfer", "Teleporter");
	static final EnumFeature DEACTIVATES = new EnumFeature("DEACTIVATES","Deactivates instead of being destroyed. NOT RECOMMENDED.", "exclamation-sign warning", "Deactivates instead of being destroyed");
	static final EnumFeature TELESPAWN = new EnumFeature("TELESPAWN","Like FACTORY, but created ships will teleport in fully built, for free. Requires a factory block on the ship to function. NOT RECOMMENDED.", "cog warning", "Teleport Factory");
	static final EnumFeature AUTOFIRE = new EnumFeature("AUTOFIRE","Weapon is bound to point defence by default and will be used as such by AI.");
	static final EnumFeature INTLINES = new EnumFeature("INTLINES","Draws lines between adjacent blocks.");
	//static final EnumFeature PERISHABLE = new EnumFeature("PERISHABLE","Has a limited lifetime after which it will deconstruct.");
	
	static List<RichEnum> values = [COMMAND, THRUSTER, GENERATOR, TURRET, CANNON, LASER, SHIELD, TORQUER, LAUNCHER, EXPLODE, ASSEMBLER, REGROWER, CANNON_BOOST, INVULNERABLE, NOREGEN, ENVIRONMENTAL, TRACTOR, ROOT, PHOTOSYNTH, FREERES, FACTORY, SEED, CHARGING, MELEE, SELFFACTORY, NOCLIP, INVISIBLE, TELEPORTER, DEACTIVATES, TELESPAWN, AUTOFIRE, INTLINES, AUTOLAUNCH];
}

class EnumAsteroidFeature extends RichEnum {
	EnumAsteroidFeature(String name, String blurb, [String iconstyle = null, String iconblurb = ""]):super(name, blurb, iconstyle, iconblurb);
	
	static final EnumAsteroidFeature EXPLOSIVE = new EnumAsteroidFeature("EXPLOSIVE","Red shapes which explode on contact");
	static final EnumAsteroidFeature PENROSE = new EnumAsteroidFeature("PENROSE","Penrose rhombus asteroid parts");
	static final EnumAsteroidFeature SQUARE = new EnumAsteroidFeature("SQUARE","Square asteroid parts");
	static final EnumAsteroidFeature HEXAGON = new EnumAsteroidFeature("HEXAGON","Hexagonal asteroid parts");
	static final EnumAsteroidFeature TRIANGLE = new EnumAsteroidFeature("TRIANGLE","Triangular asteroid parts");
	static final EnumAsteroidFeature OCTAGON = new EnumAsteroidFeature("OCTAGON","Octagonal asteroid parts");
	static final EnumAsteroidFeature UNIFORM_SIZE = new EnumAsteroidFeature("UNIFORM_SIZE","?");
	static final EnumAsteroidFeature UNIFORM_TYPE = new EnumAsteroidFeature("UNIFORM_TYPE","?");
	
	static List<RichEnum> values = [EXPLOSIVE, PENROSE, SQUARE, HEXAGON, TRIANGLE, OCTAGON, UNIFORM_SIZE, UNIFORM_TYPE];
}